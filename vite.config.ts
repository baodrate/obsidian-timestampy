import path from "node:path";
import builtins from "builtin-modules";
import { defineConfig, type UserConfig } from "vite";
import { viteStaticCopy } from "vite-plugin-static-copy";
import manifest from "./manifest.json";

const pluginId = manifest.id;

const banner = `
/*!
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

export default defineConfig(async ({ mode }) => {
	const prod = mode === "production";

	return {
		build: {
			lib: {
				entry: "src/main.ts",
				name: "main",
				fileName: () => "main.js",
				formats: ["cjs"],
			},
			target: [
				// corresponds to Obsidian desktop v1.7.7 (Electron 32.2.5)
				"chrome128",
				// corresponds to iOS 15 (still supported as of 2025-03-31)
				"safari15",
			],
			minify: prod,
			sourcemap: prod ? false : "inline",
			cssCodeSplit: true,
			emptyOutDir: false,
			outDir: "dist",
			rollupOptions: {
				input: {
					main: "src/main.ts",
					styles: "src/styles.css",
				},
				output: {
					exports: "named",
					entryFileNames: "main.js",
					assetFileNames: "styles.css",
					format: "cjs",
					banner: banner,
					sourcemapPathTransform: (relativeSourcePath, sourcemapPath) => {
						const sourcePath = path.resolve(
							path.dirname(sourcemapPath),
							relativeSourcePath,
						);
						const projectRelativeSourcePath = path.relative(
							`${__dirname}/src`,
							sourcePath,
						);
						return `app://obsidian.md/plugin:${pluginId}/${projectRelativeSourcePath}`;
					},
				},
				define: {
					DEV: (!prod).toString(),
				},
				dropLabels: prod ? ["DEV"] : [],
				external: [
					"obsidian",
					"electron",
					"@codemirror/autocomplete",
					"@codemirror/collab",
					"@codemirror/commands",
					"@codemirror/language",
					"@codemirror/lint",
					"@codemirror/search",
					"@codemirror/state",
					"@codemirror/view",
					"@lezer/common",
					"@lezer/highlight",
					"@lezer/lr",
					...builtins,
				],
			},
		},
		css: {
			transformer: "lightningcss",
			devSourcemap: true,
		},
		plugins: [
			viteStaticCopy({
				targets: [
					{
						src: "manifest.json",
						dest: ".",
					},
				],
			}),
		],
	} as UserConfig;
});
