name: Stage stable release

on:
  push:
    branches:
      - main

  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

env:
    CHANGELOG_FILE: "CHANGELOG.md"
    CHANGELOG_FILE_BETA: "CHANGELOG-beta.md"
    RELEASE_PLEASE_COMPONENT_STABLE: "stable"
    RELEASE_PLEASE_COMPONENT_BETA: "beta"
    VERSIONS_FILE: "versions.json"
    ACTIONS_BOT_LOGIN: "app/github-actions"

jobs:
  release:
    uses: ./.github/workflows/release-please.yml
    secrets: inherit

  stable-pr-changes:
    runs-on: ubuntu-latest
    needs: release-please
    if: ${{ !needs.release-please.outputs.release_created && needs.release-please.outputs.pr }}
    steps:
      - uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      # avoid setup-node cache failure; see: https://github.com/actions/setup-node/issues/1137
      - name: Verify PNPM Cache Directory
        run: |
          PNPM_STORE_PATH="$( pnpm store path --silent )"
          [ -d "$PNPM_STORE_PATH" ] || mkdir -vp "$PNPM_STORE_PATH"

      - name: Bump version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ fromJSON(needs.release-please.outputs.pr).number }}
          PR_BRANCH: ${{ fromJSON(needs.release-please.outputs.pr).headBranchName }}
        run: |
          gh pr checkout "${PR_NUMBER:?}"

          # `git add ...` in `version` script requires git user configured; it won't actually be used
          git config --local user.name "${GITHUB_ACTOR:?}"
          git config --local user.email "${GITHUB_ACTOR_ID:?}+${GITHUB_ACTOR:?}@users.noreply.github.com"
          pnpm run version

          # update beta changelog
          cp -fv "${CHANGELOG_FILE:?}" "${CHANGELOG_FILE_BETA:?}"

          for FILE_TO_COMMIT in "${VERSIONS_FILE:?}" "${CHANGELOG_FILE_BETA:?}"; do
              git add "${FILE_TO_COMMIT:?}"
              git diff --staged --quiet && continue || true
              # commit using github API so commit is signed
              SHA=$(gh api "/repos/{owner}/{repo}/contents/${FILE_TO_COMMIT:?}" --jq .sha)
              CONTENT=$(base64 "${FILE_TO_COMMIT:?}")
              gh api --method PUT "/repos/{owner}/{repo}/contents/${FILE_TO_COMMIT:?}" \
                --field message="chore: bump ${FILE_TO_COMMIT:?}" \
                --field content="${CONTENT:?}" \
                --field branch="${PR_BRANCH:?}" \
                --field sha="${SHA:?}"
          done

  close-beta-pr:
    runs-on: ubuntu-latest
    needs: [release-please, artifacts]
    if: ${{ needs.release-please.outputs.release_created }}
    steps:
      - name: Upload release artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          STABLE_PR_NUMBER: ${{ fromJSON(needs.release-please.outputs.pr).number }}
          BASE_BRANCH: ${{ fromJSON(needs.release-please.outputs.pr).baseBranchName }}
        run: |
          PR=$(
            gh pr list \
            -R "${OWNER:?}/${REPO:?}" \
            -s open \
            -A "${ACTIONS_BOT_LOGIN:?}" \
            -H "release-please--branches--${BASE_BRANCH:?}--components--${RELEASE_PLEASE_COMPONENT_BETA:?}" \
            --json number \
            --jq 'if length == 1 then .[0].number else error("found \(length) values") end'
          ) && [ -n "$PR" ] || { echo "No beta release PR found" >&2; exit 0; }
          gh pr close "${PR:?}" --delete-branch --comment "closed in favor of stable release: #${STABLE_PR_NUMBER:?}"
